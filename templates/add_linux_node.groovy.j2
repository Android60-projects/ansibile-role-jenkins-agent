import hudson.model.AbstractBuild
import hudson.model.Node
import hudson.plugins.sshslaves.SSHLauncher
import hudson.plugins.sshslaves.verifiers.NonVerifyingKeyVerificationStrategy
import hudson.plugins.sshslaves.verifiers.SshHostKeyVerificationStrategy
import hudson.slaves.ComputerLauncher
import hudson.slaves.DumbSlave
import hudson.util.VariableResolver
import jenkins.model.Jenkins
import hudson.slaves.*
import hudson.slaves.EnvironmentVariablesNodeProperty.Entry


List<Entry> env = new ArrayList<Entry>();
{% for item in (node_environments | dict2items) %}
env.add(new Entry("{{ item.key }}", "{{Â item.value }}"))
{% endfor %}
EnvironmentVariablesNodeProperty envPro = new EnvironmentVariablesNodeProperty(env);

Jenkins jenkins = Jenkins.getInstance()

String nodeHostname = "{{ node_linux_host }}"
String nodeCredentialID = "{{ node_linux_jenkins_cred_id }}"
int nodePort = {{ node_linux_ssh_port }}
SshHostKeyVerificationStrategy strategy = new NonVerifyingKeyVerificationStrategy()

ComputerLauncher nodeLauncher = new SSHLauncher( nodeHostname, nodePort,
                 nodeCredentialID, null, null, null, null, 30, 20, 10, strategy )

String nodeName = "{{ node_agent_name }}"
String nodeRemoteFS = "{{ node_linux_home }}"

Node node = new DumbSlave(nodeName, nodeRemoteFS, nodeLauncher)
node.setNumExecutors({{ node_executors_num }})
node.setLabelString("{{ node_linux_labels | join(' ') }}")
node.getNodeProperties().add(envPro)
{% if node_mode_exclusive %}
node.setMode(Node.Mode.EXCLUSIVE)
{% else %}
node.setMode(Node.Mode.NORMAL)
{% endif %}
jenkins.addNode(node)
